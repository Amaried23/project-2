<div class="container">
    <div class="section">

       <!--   filter Section   -->
      <div class="row">
        <div class="col s12">
          <div class="filterForm">
            <form>
            <div class="row">
              <h5>Filter Results</h5>
              <hr class="style">
              <div class="input-field col s6">
                <input id="filterAddress" type="text" class="validate">
                <label for="filterAddress">Your Address</label>
              </div>

              <div class="input-field col s3">
                <input id="checkIn" type="text" class="datepicker">
                <label for="checkIn">Check In</label>
              </div>

              <div class="input-field col s3">
                <input id="checkOut" type="text" class="datepicker">
                <label for="checkOut">Check Out</label>
              </div>
            </div>

            <div class="row">
              <div class="input-field col s3">
                <input id="guestNum" type="number" name="quantity" min="1" max="20">
                <label for="guestNum">Number of Guests</label>
              </div>
              <div class="col s3 checkbox">
                <input type="checkbox" id="hasPets">
                <label for="hasPets">Pets?</label>
              </div>
              <div class="input-field col s3 right">
                 <a href="#" class="waves-effect waves-light btn filterButton">Filter</a>
              </div>
            </div>
          </form> 
          </div>
        </div>
      </div>
    </div>
  </div>
{{!-- 
  <div class="card-block" id="formatted-address"></div>
    <div class="card-block" id="address-components"></div>
    <div class="card-block" id="geometry"></div> --}}
    
<h2>Total Pages:{{ pages }}</h2>

<a class="special-link page-back" href="/listings/back">Previous Page</a>
<a class="special-link page-next" href="/listings/next">Next Page</a>

{{#each hosts}}
<div class="row">
  <div class="col s12 m7">
    <div class="card horizontal">
      <div class="card-image">
        <img src="http://materializecss.com/images/sample-1.jpg">
        <span class="card-title">ID : {{ id }}</span>
      </div>
      <div class="card-content">
        <p>{{first_name}} {{ last_name }}</p>
      </div>
      <div class="card-action">
        <a href="#">This is a link </a>
      </div>
    </div>
  </div>
</div>
{{/each}}

{{!-- Google Autocomplete --}} 
{{#sections 'head'}}
<script async defer src="https://maps.googleapis.com/maps/api/js?key=AIzaSyCH-6r9WrlUwy1swTIHIYFrm4IcXcjZDEk&libraries=geometry,places&callback=initMap"></script>
<script type="text/javascript">
     function initMap(){
      var input = document.getElementById("filterAddress");
      var autocomplete = new google.maps.places.Autocomplete(input);
    }


 // // Call Geocode
 //    //geocode();

 //    // Get location form
 //    var locationForm = document.getElementById('location-form');

 //    // Listen for submiot
 //    locationForm.addEventListener('submit', geocode);

 //    function geocode(e){
 //      // Prevent actual submit
 //      e.preventDefault();

 //      var location = document.getElementById('location-input').value;

 //      axios.get('https://maps.googleapis.com/maps/api/geocode/json',{
 //        params:{
 //          address:location,
 //          key:'AIzaSyCH-6r9WrlUwy1swTIHIYFrm4IcXcjZDEk'
 //        }
 //      })
 //      .then(function(response){
 //        // Log full response
 //        console.log(response);

 //        // Formatted Address
 //        var formattedAddress = response.data.results[0].formatted_address;
 //        var formattedAddressOutput = `
 //          <ul class="list-group">
 //            <li class="list-group-item">${formattedAddress}</li>
 //          </ul>
 //        `;

 //        // Address Components
 //        var addressComponents = response.data.results[0].address_components;
 //        var addressComponentsOutput = '<ul class="list-group">';
 //        for(var i = 0;i < addressComponents.length;i++){
 //          addressComponentsOutput += `
 //            <li class="list-group-item"><strong>${addressComponents[i].types[0]}</strong>: ${addressComponents[i].long_name}</li>
 //          `;
 //        }
 //        addressComponentsOutput += '</ul>';

 //        // Geometry
 //        var lat = response.data.results[0].geometry.location.lat;
 //        var lng = response.data.results[0].geometry.location.lng;
 //        var geometryOutput = `
 //          <ul class="list-group">
 //            <li class="list-group-item"><strong>Latitude</strong>: ${lat}</li>
 //            <li class="list-group-item"><strong>Longitude</strong>: ${lng}</li>
 //          </ul>
 //        `;

 //        // Output to app
 //        document.getElementById('formatted-address').innerHTML = formattedAddressOutput;
 //        document.getElementById('address-components').innerHTML = addressComponentsOutput;
 //        document.getElementById('geometry').innerHTML = geometryOutput;
 //      })
 //      .catch(function(error){
 //        console.log(error);
 //      });
 //    }



</script>
{{/sections}}
{{#sections 'footer'}}

 

<script>


  console.log('inig')


  $(document).ready(function(){
    function page(page) {
      this.path = page
    }

    $('.special-link').on('click', function (e) {
      e.preventDefault()
      var link = e.target.classList;
      let referral = window.location.href;
      console.log(referral)
      let paginate = new page(referral);
      paginate.currentPage = function () {
        return this.path;
      }

      paginate.url = function (link, newPage, queryString) {
        console.log(link + "/listings/" + newPage + "?" + queryString)
        window.location = link + "/listings/" + newPage + "?" + queryString
      }

      paginate.nextPage = function () {
        var url = this.currentPage();
        var regExp = /(\/([0-9]+)\?)/;
        var pageNum = regExp.exec(url)[2];

        regExp = /(\?(.+))/;
        var queryString = regExp.exec(url)[2];
        link = window.location.origin;

        var newPage = Number(pageNum) + 1;

        this.url(link, newPage, queryString);
      }

      paginate.prevPage = function () {
        var url = this.currentPage();
        var regExp = /(\/([0-9]+)\?)/;
        var pageNum = regExp.exec(url)[2];

        regExp = /(\?(.+))/;
        var queryString = regExp.exec(url)[2];
        link = window.location.origin;

        var newPage = Number(pageNum) - 1;

        this.url(link, newPage, queryString);
      }

      for (var i = 0; i < link.length; i++) {
        if (link[i] === 'page-next') {
          paginate.nextPage()
        } else if (link[i] === 'page-back') {
          paginate.prevPage()
        }
      }

    });
  });


 



</script>



{{/sections }}

